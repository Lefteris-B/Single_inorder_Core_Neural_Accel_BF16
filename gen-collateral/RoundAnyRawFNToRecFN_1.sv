// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RoundAnyRawFNToRecFN_1(
  input         io_invalidExc,
                io_in_isNaN,
                io_in_isInf,
                io_in_isZero,
                io_in_sign,
  input  [9:0]  io_in_sExp,
  input  [26:0] io_in_sig,
  output [32:0] io_out
);

  wire [8:0]  _roundMask_T_1 = ~(io_in_sExp[8:0]);	// @[RoundAnyRawFNToRecFN.scala:154:37, primitives.scala:51:21]
  wire [64:0] _GEN = {59'h0, _roundMask_T_1[5:0]};	// @[primitives.scala:51:21, :58:26, :77:58]
  wire [64:0] roundMask_shift = $signed(65'sh10000000000000000 >>> _GEN);	// @[primitives.scala:77:58]
  wire [64:0] roundMask_shift_1 = $signed(65'sh10000000000000000 >>> _GEN);	// @[primitives.scala:77:58]
  wire [24:0] _roundMask_T_74 = (_roundMask_T_1[8] ? (_roundMask_T_1[7] ? {~(_roundMask_T_1[6] ? 22'h0 : ~{roundMask_shift[42], roundMask_shift[43], roundMask_shift[44], roundMask_shift[45], roundMask_shift[46], roundMask_shift[47], roundMask_shift[48], roundMask_shift[49], roundMask_shift[50], roundMask_shift[51], roundMask_shift[52], roundMask_shift[53], roundMask_shift[54], roundMask_shift[55], roundMask_shift[56], roundMask_shift[57], roundMask_shift[58], roundMask_shift[59], roundMask_shift[60], roundMask_shift[61], roundMask_shift[62], roundMask_shift[63]}), 3'h7} : {22'h0, _roundMask_T_1[6] ? {roundMask_shift_1[0], roundMask_shift_1[1], roundMask_shift_1[2]} : 3'h0}) : 25'h0) | {24'h0, io_in_sig[26]};	// @[Bitwise.scala:108:{21,46}, :114:{18,47}, Cat.scala:33:92, RoundAnyRawFNToRecFN.scala:118:61, :157:23, primitives.scala:51:21, :57:25, :58:26, :61:24, :66:24, :74:{17,21,36}, :77:58, :79:22]
  wire [25:0] _GEN_0 = {_roundMask_T_74, 1'h1};	// @[Cat.scala:33:92, RoundAnyRawFNToRecFN.scala:157:23]
  wire [25:0] _GEN_1 = io_in_sig[26:1] & {1'h1, ~_roundMask_T_74} & _GEN_0;	// @[Cat.scala:33:92, RoundAnyRawFNToRecFN.scala:157:23, :161:28, :162:40]
  wire [25:0] roundedSig = (|_GEN_1) ? {1'h0, io_in_sig[26:2] | _roundMask_T_74} + 26'h1 & ~((|_GEN_1) & (io_in_sig[25:0] & _GEN_0) == 26'h0 ? {_roundMask_T_74, 1'h1} : 26'h0) : {1'h0, io_in_sig[26:2] & ~_roundMask_T_74};	// @[Cat.scala:33:92, RoundAnyRawFNToRecFN.scala:157:23, :160:57, :161:28, :162:{40,56}, :163:{42,62}, :171:16, :172:{32,49,61}, :173:{21,25,64}, :178:{30,47}, :179:24]
  wire [10:0] sRoundedExp = {io_in_sExp[9], io_in_sExp} + {9'h0, roundedSig[25:24]};	// @[RoundAnyRawFNToRecFN.scala:171:16, :183:{40,54}, :271:16]
  wire        common_totalUnderflow = $signed(sRoundedExp) < 11'sh6B;	// @[RoundAnyRawFNToRecFN.scala:183:40, :198:31]
  wire        isNaNOut = io_invalidExc | io_in_isNaN;	// @[RoundAnyRawFNToRecFN.scala:233:34]
  wire        notNaN_isInfOut = io_in_isInf | ~isNaNOut & ~io_in_isInf & ~io_in_isZero & $signed(sRoundedExp[10:7]) > 4'sh2;	// @[RoundAnyRawFNToRecFN.scala:183:40, :194:{30,50}, :233:34, :235:{22,36,64}, :236:32, :246:32]
  assign io_out = {~isNaNOut & io_in_sign, sRoundedExp[8:0] & ~(io_in_isZero | common_totalUnderflow ? 9'h1C0 : 9'h0) & {2'h3, ~notNaN_isInfOut, 6'h3F} | (notNaN_isInfOut ? 9'h180 : 9'h0) | (isNaNOut ? 9'h1C0 : 9'h0), isNaNOut | io_in_isZero | common_totalUnderflow ? {isNaNOut, 22'h0} : io_in_sig[26] ? roundedSig[23:1] : roundedSig[22:0]};	// @[Cat.scala:33:92, RoundAnyRawFNToRecFN.scala:118:61, :171:16, :183:40, :185:37, :187:16, :188:27, :189:27, :198:31, :233:34, :246:32, :248:22, :251:{14,18,32}, :262:17, :263:{14,18}, :271:16, :275:{16,77}, :276:16, :278:{12,38}, :279:16, primitives.scala:74:21]
endmodule

