// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module LoopMatmulLdB(
  input         clock,
                reset,
                io_req_valid,
  input  [15:0] io_req_bits_max_k,
                io_req_bits_max_j,
  input  [3:0]  io_req_bits_pad_k,
                io_req_bits_pad_j,
  input  [33:0] io_req_bits_dram_addr,
                io_req_bits_dram_stride,
  input         io_req_bits_transpose,
  input  [12:0] io_req_bits_addr_end,
  input         io_req_bits_loop_id,
                io_req_bits_is_resadd,
                io_cmd_ready,
                io_rob_overloaded,
  output        io_req_ready,
                io_cmd_valid,
  output [63:0] io_cmd_bits_rs1,
                io_cmd_bits_rs2,
  output [15:0] io_k,
                io_j,
  output        io_idle,
                io_loop_id
);

  wire [11:0] mvin_cmd_rs2_local_addr_data;	// @[LoopMatmul.scala:196:27, :199:23, :200:29]
  wire        mvin_cmd_rs2_local_addr_garbage_bit;	// @[LoopMatmul.scala:196:27, :199:23, :200:29]
  wire [2:0]  mvin_cmd_rs2_local_addr_norm_cmd;	// @[LoopMatmul.scala:196:27, :199:23, :200:29]
  reg         state;	// @[LoopMatmul.scala:159:22]
  reg  [15:0] req_max_k;	// @[LoopMatmul.scala:161:16]
  reg  [15:0] req_max_j;	// @[LoopMatmul.scala:161:16]
  reg  [3:0]  req_pad_k;	// @[LoopMatmul.scala:161:16]
  reg  [3:0]  req_pad_j;	// @[LoopMatmul.scala:161:16]
  reg  [33:0] req_dram_addr;	// @[LoopMatmul.scala:161:16]
  reg  [33:0] req_dram_stride;	// @[LoopMatmul.scala:161:16]
  reg         req_transpose;	// @[LoopMatmul.scala:161:16]
  reg  [12:0] req_addr_end;	// @[LoopMatmul.scala:161:16]
  reg         req_loop_id;	// @[LoopMatmul.scala:161:16]
  reg         req_is_resadd;	// @[LoopMatmul.scala:161:16]
  reg  [15:0] k;	// @[LoopMatmul.scala:163:14]
  reg  [15:0] j;	// @[LoopMatmul.scala:164:14]
  wire [15:0] row_iterator = req_transpose ? j : k;	// @[LoopMatmul.scala:161:16, :163:14, :164:14, :166:25]
  wire [15:0] col_iterator = req_transpose ? k : j;	// @[LoopMatmul.scala:161:16, :163:14, :164:14, :167:25]
  wire [15:0] max_row_iterator = req_transpose ? req_max_j : req_max_k;	// @[LoopMatmul.scala:161:16, :169:29]
  wire [15:0] max_col_iterator = req_transpose ? req_max_k : req_max_j;	// @[LoopMatmul.scala:161:16, :170:29]
  wire [15:0] max_blocks = max_col_iterator < 16'h5 ? max_col_iterator : 16'h4;	// @[LoopMatmul.scala:170:29, :176:{23,36}]
  wire [28:0] _GEN = {16'h0, req_addr_end};	// @[LoopMatmul.scala:161:16, :178:69, Mux.scala:101:16]
  wire [28:0] _GEN_0 = (req_is_resadd ? _GEN : _GEN - {{9'h0, req_max_k} * {9'h0, req_max_j}, 4'h0}) + {{9'h0, row_iterator} * {9'h0, max_col_iterator} + {9'h0, col_iterator}, 4'h0};	// @[LoopMatmul.scala:161:16, :166:25, :167:25, :170:29, :178:{26,69,81}, :182:{31,47,66}, :184:43, :193:16]
  wire [15:0] blocks = col_iterator + max_blocks <= max_col_iterator ? max_blocks : max_col_iterator - col_iterator;	// @[LoopMatmul.scala:167:25, :170:29, :176:23, :183:{19,33,46,95}]
  assign mvin_cmd_rs2_local_addr_norm_cmd = req_is_resadd ? _GEN_0[28:26] : _GEN_0[28:26];	// @[LocalAddr.scala:108:37, LoopMatmul.scala:161:16, :182:31, :196:27, :199:23, :200:29]
  assign mvin_cmd_rs2_local_addr_garbage_bit = req_is_resadd ? _GEN_0[12] : _GEN_0[12];	// @[LocalAddr.scala:108:37, LoopMatmul.scala:161:16, :182:31, :196:27, :199:23, :200:29]
  assign mvin_cmd_rs2_local_addr_data = req_is_resadd ? _GEN_0[11:0] : _GEN_0[11:0];	// @[LocalAddr.scala:108:37, LoopMatmul.scala:161:16, :182:31, :196:27, :199:23, :200:29]
  wire        _io_cmd_valid_output = state & ~io_rob_overloaded & (|req_dram_addr);	// @[LoopMatmul.scala:159:22, :161:16, :208:{37,56,73}]
  wire        _T = req_dram_addr == 34'h0;	// @[LoopMatmul.scala:161:16, :180:35, :213:22]
  wire        _T_1 = io_cmd_ready & _io_cmd_valid_output;	// @[Decoupled.scala:51:35, LoopMatmul.scala:208:56]
  wire [16:0] _next_j_T_3 = {1'h0, j} + {1'h0, req_transpose ? 16'h1 : max_blocks};	// @[LoopMatmul.scala:159:22, :161:16, :164:14, :176:23, :217:23, Util.scala:41:15]
  wire        _next_j_T_4 = _next_j_T_3 > {1'h0, req_max_j - 16'h1};	// @[LoopMatmul.scala:159:22, :161:16, Util.scala:39:28, :41:15, :43:17]
  wire [15:0] next_j = _next_j_T_4 ? 16'h0 : _next_j_T_3[15:0];	// @[Mux.scala:101:16, Util.scala:41:15, :43:17]
  wire [16:0] _next_k_T_4 = {1'h0, k} + {1'h0, req_transpose ? max_blocks : 16'h1};	// @[LoopMatmul.scala:159:22, :161:16, :163:14, :176:23, :217:23, :218:23, Util.scala:41:15]
  wire        _next_k_T_5 = _next_k_T_4 > {1'h0, req_max_k - 16'h1};	// @[LoopMatmul.scala:159:22, :161:16, Util.scala:39:28, :41:15, :43:17]
  wire        _T_5 = ~state & io_req_valid;	// @[Decoupled.scala:51:35, LoopMatmul.scala:159:22, :203:25]
  always @(posedge clock) begin
    if (reset)
      state <= 1'h0;	// @[LoopMatmul.scala:159:22]
    else
      state <= _T_5 | ~(_T | _T_1 & ~(|next_j) & ((|next_j) ? k : _next_k_T_5 ? 16'h0 : _next_k_T_4[15:0]) == 16'h0) & state;	// @[Decoupled.scala:51:35, LoopMatmul.scala:159:22, :163:14, :213:{22,30}, :214:11, :215:27, :221:58, :226:{36,45}, :227:13, :231:22, :233:11, Mux.scala:101:16, Util.scala:41:15, :43:17]
    if (_T_5) begin	// @[Decoupled.scala:51:35]
      req_max_k <= io_req_bits_max_k;	// @[LoopMatmul.scala:161:16]
      req_max_j <= io_req_bits_max_j;	// @[LoopMatmul.scala:161:16]
      req_pad_k <= io_req_bits_pad_k;	// @[LoopMatmul.scala:161:16]
      req_pad_j <= io_req_bits_pad_j;	// @[LoopMatmul.scala:161:16]
      req_dram_addr <= io_req_bits_dram_addr;	// @[LoopMatmul.scala:161:16]
      req_dram_stride <= io_req_bits_dram_stride;	// @[LoopMatmul.scala:161:16]
      req_transpose <= io_req_bits_transpose;	// @[LoopMatmul.scala:161:16]
      req_addr_end <= io_req_bits_addr_end;	// @[LoopMatmul.scala:161:16]
      req_loop_id <= io_req_bits_loop_id;	// @[LoopMatmul.scala:161:16]
      req_is_resadd <= io_req_bits_is_resadd;	// @[LoopMatmul.scala:161:16]
      k <= 16'h0;	// @[LoopMatmul.scala:163:14, Mux.scala:101:16]
      j <= 16'h0;	// @[LoopMatmul.scala:164:14, Mux.scala:101:16]
    end
    else begin	// @[Decoupled.scala:51:35]
      if (_T | ~_T_1 | (|next_j)) begin	// @[Decoupled.scala:51:35, LoopMatmul.scala:163:14, :164:14, :213:{22,30}, :215:27, :221:58, Mux.scala:101:16]
      end
      else if (_next_k_T_5)	// @[Util.scala:43:17]
        k <= 16'h0;	// @[LoopMatmul.scala:163:14, Mux.scala:101:16]
      else	// @[Util.scala:43:17]
        k <= _next_k_T_4[15:0];	// @[LoopMatmul.scala:163:14, Util.scala:41:15]
      if (_T | ~_T_1) begin	// @[Decoupled.scala:51:35, LoopMatmul.scala:164:14, :213:{22,30}, :215:27]
      end
      else if (_next_j_T_4)	// @[Util.scala:43:17]
        j <= 16'h0;	// @[LoopMatmul.scala:164:14, Mux.scala:101:16]
      else	// @[Util.scala:43:17]
        j <= _next_j_T_3[15:0];	// @[LoopMatmul.scala:164:14, Util.scala:41:15]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        state = _RANDOM_0[0];	// @[LoopMatmul.scala:159:22]
        req_max_k = _RANDOM_0[16:1];	// @[LoopMatmul.scala:159:22, :161:16]
        req_max_j = {_RANDOM_0[31:17], _RANDOM_1[0]};	// @[LoopMatmul.scala:159:22, :161:16]
        req_pad_k = _RANDOM_1[4:1];	// @[LoopMatmul.scala:161:16]
        req_pad_j = _RANDOM_1[8:5];	// @[LoopMatmul.scala:161:16]
        req_dram_addr = {_RANDOM_1[31:9], _RANDOM_2[10:0]};	// @[LoopMatmul.scala:161:16]
        req_dram_stride = {_RANDOM_2[31:11], _RANDOM_3[12:0]};	// @[LoopMatmul.scala:161:16]
        req_transpose = _RANDOM_3[13];	// @[LoopMatmul.scala:161:16]
        req_addr_end = _RANDOM_3[26:14];	// @[LoopMatmul.scala:161:16]
        req_loop_id = _RANDOM_3[27];	// @[LoopMatmul.scala:161:16]
        req_is_resadd = _RANDOM_3[28];	// @[LoopMatmul.scala:161:16]
        k = {_RANDOM_3[31:29], _RANDOM_4[12:0]};	// @[LoopMatmul.scala:161:16, :163:14]
        j = _RANDOM_4[28:13];	// @[LoopMatmul.scala:163:14, :164:14]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_ready = ~state;	// @[LoopMatmul.scala:159:22, :203:25]
  assign io_cmd_valid = _io_cmd_valid_output;	// @[LoopMatmul.scala:208:56]
  assign io_cmd_bits_rs1 = {8'h0, {22'h0, req_dram_addr} + {2'h0, {34'h0, row_iterator} * {16'h0, req_dram_stride} + {34'h0, col_iterator} & 50'hFFFFFFF, 4'h0}};	// @[LoopMatmul.scala:161:16, :166:25, :167:25, :180:{35,53}, :181:33, :184:43, :185:27, :190:16, :1139:17, Mux.scala:101:16]
  assign io_cmd_bits_rs2 = {11'h0, 5'h10 - {1'h0, max_row_iterator == max_row_iterator - 16'h1 ? (req_transpose ? req_pad_j : req_pad_k) : 4'h0}, 9'h0, {blocks[2:0], 4'h0} - {3'h0, col_iterator + blocks >= max_col_iterator ? (req_transpose ? req_pad_k : req_pad_j) : 4'h0}, {2{req_is_resadd}}, 1'h0, mvin_cmd_rs2_local_addr_norm_cmd, 13'h0, mvin_cmd_rs2_local_addr_garbage_bit, mvin_cmd_rs2_local_addr_data};	// @[LocalAddr.scala:109:57, LoopMatmul.scala:159:22, :161:16, :167:25, :169:29, :170:29, :172:20, :173:20, :183:19, :184:{38,43,57,66}, :185:{27,32,50,70}, :193:16, :196:27, :197:32, :199:23, :200:29]
  assign io_k = k;	// @[LoopMatmul.scala:163:14]
  assign io_j = j;	// @[LoopMatmul.scala:164:14]
  assign io_idle = ~state;	// @[LoopMatmul.scala:159:22, :203:25]
  assign io_loop_id = req_loop_id;	// @[LoopMatmul.scala:161:16]
endmodule

